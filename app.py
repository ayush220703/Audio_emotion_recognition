# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YaI7T22QQPKYZ_jFsPiIJ714ijR1kGpC
"""

# app.py

import streamlit as st
import numpy as np
import librosa
import tensorflow as tf
from tensorflow.keras.models import load_model
import os

# Constants
SAMPLE_RATE = 22050
DURATION = 3
N_MELS = 128
EXPECTED_SHAPE = (128, 128)
EMOTIONS = ['neutral', 'calm', 'happy', 'sad', 'angry', 'fear', 'disgust', 'surprise']

# Load model and normalization data
@st.cache_resource
def load_artifacts():
    model = load_model('trained_model.h5', compile=False)
    mean = np.load('train_mean.npy')
    std = np.load('train_std.npy')
    return model, mean, std

model, mean, std = load_artifacts()

# Function to extract log-mel spectrogram
def extract_log_mel(path):
    y, _ = librosa.load(path, sr=SAMPLE_RATE, duration=DURATION)
    if len(y) < SAMPLE_RATE * DURATION:
        y = np.pad(y, (0, SAMPLE_RATE * DURATION - len(y)), mode='constant')
    else:
        y = y[:SAMPLE_RATE * DURATION]

    S = librosa.feature.melspectrogram(y=y, sr=SAMPLE_RATE, n_mels=N_MELS)
    S_db = librosa.power_to_db(S, ref=np.max)

    if S_db.shape[1] < 128:
        S_db = np.pad(S_db, ((0,0), (0, 128 - S_db.shape[1])), mode='constant')
    else:
        S_db = S_db[:, :128]

    return S_db

# Streamlit UI
st.title("ðŸŽ§ Speech Emotion Recognition")
st.markdown("Upload an audio file (.wav) to predict the emotion expressed.")

uploaded_file = st.file_uploader("Choose an audio file", type=["wav"])

if uploaded_file is not None:
    st.audio(uploaded_file, format="audio/wav")

    # Save file temporarily
    with open("temp.wav", "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Extract features and predict
    mel = extract_log_mel("temp.wav")
    mel = (mel - mean) / std
    mel = mel[np.newaxis, ..., np.newaxis]

    prediction = model.predict(mel)
    pred_class = np.argmax(prediction)
    confidence = prediction[0][pred_class]

    st.success(f"**Predicted Emotion:** {EMOTIONS[pred_class]}")
    st.info(f"**Confidence:** {confidence:.2f}")